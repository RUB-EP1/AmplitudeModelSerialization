---
jupyter: julia-amplitude-serialization-1.10
---

# $X\to \pi^-\pi^+\pi^-$

::: {.callout-note appearance="simple"}
Model definition: [`x2pipipi-compass-1391643.json`](https://github.com/RUB-EP1/amplitude-serialization/blob/main/models/x2pipipi-compass-1391643.json).
:::

This page demonstrates deserialization and evaluation the a partial wave analysis of diffractively produced $3\pi$ system. The analysis is performed independently in bins of $3\pi$ mass, and transferred momentum. The total number of bins is 100.
For every bin, the model includes about 170 decay chains (about 88 waves, symmetrized for two $\pi^+\pi^-$ pairs). The main paper describing details of the analysis is [INSPIRE-HEP 1391643](https://inspirehep.net/literature/1391643).

```{julia}
#| code-fold: true
#| code-summary: Activate environment
#| output: false
import Pkg
Pkg.activate(@__DIR__)
Pkg.instantiate()

using ThreeBodyDecaysIO
using ThreeBodyDecaysIO.ThreeBodyDecays
using ThreeBodyDecaysIO.HadronicLineshapes
using ThreeBodyDecaysIO.Parameters
using ThreeBodyDecaysIO.DataFrames
using ThreeBodyDecaysIO.JSON
using Measurements
using Statistics
using QuadGK
using Plots

theme(:wong2, frame=:box, grid=false, minorticks=true,
    guidefontvalign=:top, guidefonthalign=:right,
    foreground_color_legend=nothing,
    xlim=(:auto, :auto), ylim=(:auto, :auto),
    lab="")
```

## Function definitions

Non-standard lineshapes are used to model resonances that do not conform to a simple `BreitWigner` distributions, or a `MultichannelBreitWigner` has to be defined explicitly.
The code below defines a new lineshape, and its deserialization method.

```{julia}
@with_kw struct BreitWignerRhoNoSqrt <: HadronicLineshapes.AbstractFlexFunc
    m::Float64
    Î“::Float64
    mÏ€::Float64
    d::Float64
end
function (bw::BreitWignerRhoNoSqrt)(Ïƒ)
    @unpack m, Î“, mÏ€, d = bw
    p, p0 = sqrt(Ïƒ / 4 - mÏ€^2), sqrt(m^2 / 4 - mÏ€^2)
    ff = BlattWeisskopf{1}(d)
    mÎ“ = m * Î“ * p / p0 * ff(p)^2 / ff(p0)^2
    1 / (m^2 - Ïƒ - 1im * mÎ“)
end
function ThreeBodyDecaysIO.dict2instance(::Type{BreitWignerRhoNoSqrt}, dict)
    @unpack mass, width, mÏ€, d = dict
    return BreitWignerRhoNoSqrt(mass, width, mÏ€, d)
end


@with_kw struct BreitWignerRho3XQrt <: HadronicLineshapes.AbstractFlexFunc
    m::Float64
    Î“::Float64
end
function (bw::BreitWignerRho3XQrt)(Ïƒ)
    @unpack m, Î“ = bw
    sqrt(sqrt(Ïƒ)) / (m^2 - Ïƒ - 1im * m * Î“)
end
function ThreeBodyDecaysIO.dict2instance(::Type{BreitWignerRho3XQrt}, dict)
    @unpack mass, width = dict
    return BreitWignerRho3XQrt(mass, width)
end


@with_kw struct KatchaevSigma <: HadronicLineshapes.AbstractFlexFunc
    poles::Vector{Float64}
    residues::Vector{Float64}
    nonpole_expansion_coeffs::Vector{Float64}
end
function (bw::KatchaevSigma)(Ïƒ)
    mÏ€ = 0.13956755
    mÏ€2 = mÏ€^2

    @unpack poles, residues, nonpole_expansion_coeffs = bw
    M00 = 0.0
    for i = 1:length(poles)
        M00 += residues[i] / (Ïƒ - poles[i])
    end
    #
    mK = 0.493677
    mK0 = 0.497614
    scale = (Ïƒ / (4 * ((mK + mK0) / 2.0)^2)) - 1.0
    for (i, ci) in enumerate(nonpole_expansion_coeffs)
        M00 += scale^(i - 1) * ci
    end

    rho00 = sqrt(Kallen(Ïƒ, mÏ€2, mÏ€2)) / Ïƒ
    return 1.0 / (M00 - 1im * rho00)
end
function ThreeBodyDecaysIO.dict2instance(::Type{KatchaevSigma}, dict)
    @unpack poles, residues, nonpole_expansion_coeffs = dict
    return KatchaevSigma(poles, residues, nonpole_expansion_coeffs)
end
```

## Deserialization of Objects to a Workspace

Model components are deserialized from a JSON file into computational objects within a workspace for further manipulation. First, functions representing lineshapes and form factors are built. Following this, distributions are processed and added to the workspace.

```{julia}
#| code-fold: true
#| code-summary: All `functions` and `distributution` are parsed here
#| output: false
input = open(joinpath(@__DIR__, "..", "..", "models", "x2pipipi-compass-1391643.json")) do io
    JSON.parse(io)
end

workspace = Dict{String,Any}()

@unpack functions = input
for fn in functions
    @unpack name, type = fn
    instance_type = eval(Symbol(type))
    workspace[name] = dict2instance(instance_type, fn)
end

@unpack distributions = input
for dist in distributions
    @unpack name, type = dist
    instance_type = eval(Symbol(type))
    workspace[name] = dict2instance(instance_type, dist; workspace)
end
```

## Validation

The integrity of the model is checked by validating the value of distributions at a few phase space points.
The table lists the validation checks and their status. The marks "ðŸŸ¢", "ðŸŸ¡", and "ðŸ”´" indicate
an accuracy of $<10^{-10}$, $<10^{-2}$, or $\ge10^{-2}$, respectively, for the difference between the reference and computed values.

```{julia}
#| code-fold: true
#| code-summary: A loop over validation points
let
    @unpack misc, parameter_points = input
    @unpack amplitude_model_checksums = misc

    map(amplitude_model_checksums) do check_point_info
        @unpack point, value, distribution = check_point_info
        #
        # pull distribution
        dist = workspace[distribution]

        # pull correct parameter point
        parameter_points_dict = array2dict(parameter_points; key="name")
        # find the point in the list of points
        parameter_point = parameter_points_dict[point]
        # compute, compare
        _parameters = array2dict(parameter_point["parameters"];
            key="name", apply=v -> v["value"])
        #
        computed_value = dist(_parameters)
        status = label_diff(value - computed_value; levels=[1e-3, 1e-10])
        (; Distribution=distribution,
            Point=point, computed_value, value, Status=status)
    end |> DataFrame
end
```

## Visualization

The model describing the decay is fetched from the workspace

```{julia}
model_names = [k for (k, v) in workspace if v isa HadronicUnpolarizedIntensity]
```

### Dalitz plot

The Dalitz plot shows the probability distribution across two dimensional phase space of the decay. Below the distribution is shown for all models in the file

```{julia}
#| code-fold: true
#| code-summary: Dalitz plot plotting
let iÏƒx = 3, iÏƒy = 1
    n_models = length(model_names)
    Nx, Ny = 2, div(n_models + 1, 2)
    plot(
        map(model_names) do model_name
            model = workspace[model_name].model
            #
            xlab = ((i, j) = ij_from_k(iÏƒx);
            "mÂ²($i$j) [GeVÂ²]")
            ylab = ((i, j) = ij_from_k(iÏƒy);
            "mÂ²($i$j) [GeVÂ²]")

            plot(masses(model), Base.Fix1(unpolarized_intensity, model);
                iÏƒx, iÏƒy, xlab, ylab, title=model_name[13:end], aspect_ratio=1)
        end...,
        layout=grid(Ny, Nx),
        size=(350 * Nx, 350 * Ny))
end
```
