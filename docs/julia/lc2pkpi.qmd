---
jupyter: julia-amplitude-serialization-1.10
---

# $\Lambda_c \to p K \pi$

## Install packages


```{julia}
#| code-fold: true
#| code-summary: Activate environment
#| output: false
import Pkg
Pkg.activate(@__DIR__)
Pkg.instantiate()
```


```{julia}
using ThreeBodyDecaysIO
using ThreeBodyDecaysIO.ThreeBodyDecays
using HadronicLineshapes
using JSON
using Parameters
using DataFrames
using Plots
using Test
```

## Function definitions

```{julia}
@with_kw struct BreitWignerWidthExpLikeBugg <: HadronicLineshapes.AbstractFlexFunc
    m::Float64
    Î“::Float64
    Î³::Float64
end
function (BW::BreitWignerWidthExpLikeBugg)(Ïƒ)
    mK = 0.493677
    mÏ€ = 0.13957018
    ÏƒA = mK^2 - mÏ€^2 / 2
    @unpack m, Î“, Î³ = BW
    Î“t = (Ïƒ - ÏƒA) / (m^2 - ÏƒA) * Î“ * exp(-Î³ * Ïƒ)
    1 / (m^2 - Ïƒ - 1im * m * Î“t)
end
function ThreeBodyDecaysIO.dict2instance(::Type{BreitWignerWidthExpLikeBugg}, dict)
    @unpack mass, width, slope = dict
    return BreitWignerWidthExpLikeBugg(mass, width, slope)
end
```

## Implementation

Get the JSON content

```{julia}
input = open(joinpath(@__DIR__, "..", "..", "models", "Lc2ppiK.json")) do io
    JSON.parse(io)
end
```

Built functions will be stored in workspace:

```{julia}
workspace = Dict{String,Any}()
```



Build functions from JSON array:

```{julia}
@unpack functions = input
for fn in functions
    @unpack name, type = fn
    instance_type = eval(Symbol(type))
    workspace[name] = dict2instance(instance_type, fn)
end
```

Build distributions from JSON array:

```{julia}
@unpack distributions = input
for dist in distributions
    @unpack name, type = dist
    instance_type = eval(Symbol(type))
    workspace[name] = dict2instance(instance_type, distributions[1]; workspace)
end
```

Perform validation:

```{julia}
@unpack misc, parameter_points = input
@unpack amplitude_model_checksums = misc

# map(amplitude_model_checksums) do check_point_info
let check_point_info = amplitude_model_checksums[1]
    @unpack name, value, distribution = check_point_info
    #
    # pull distribution
    dist = workspace[distribution]

    # pull correct parameter point
    parameter_points_dict = array2dict(parameter_points; key="name")
    # find the point in the list of points
    parameter_point = parameter_points_dict[name]
    # compute, compare
    _parameters = array2dict(parameter_point["parameters"];
        key="name", apply=v -> v["value"])
    @assert value â‰ˆ dist(_parameters) "Check-point validation failed with $distribution ðŸ¥•"
    return "ðŸŸ¢"
end
```

Plot the model:

```{julia}
#| code-fold: true
let
    model = workspace["my_model_for_reaction_intensity"].model
    plot(masses(model), Base.Fix1(unpolarized_intensity, model))
end
```
