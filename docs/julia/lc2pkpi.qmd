---
jupyter: julia-amplitude-serialization-1.10
---

# $\Lambda_c^+ \to p K^- \pi^+$

This page demostrates deserialization and evaluation of an amplitude model for the decay $\Lambda_c^+ \to p K^- \pi^+$. The amplitude analysis is performed based on roughly half a millon of $\Lambda_c^{\pm}$ decay candidates by the LHCb collaboration, [INSPIRE-HEP 2683025](https://inspirehep.net/literature/2683025). Detains on the mapped of the ampltude model onto the standard helicity formalism can be found in appendix of [INSPIRE-HEP 2623821](https://inspirehep.net/literature/2623821).

```{julia}
#| code-fold: true
#| code-summary: Activate environment
#| output: false
import Pkg
Pkg.activate(@__DIR__)
Pkg.instantiate()

using ThreeBodyDecaysIO
using ThreeBodyDecaysIO.ThreeBodyDecays
using ThreeBodyDecaysIO.HadronicLineshapes
using ThreeBodyDecaysIO.Parameters
using ThreeBodyDecaysIO.DataFrames
using ThreeBodyDecaysIO.JSON
using Measurements
using Statistics
using QuadGK
using Plots

theme(:wong2, frame=:box, grid=false, minorticks=true,
    guidefontvalign=:top, guidefonthalign=:right,
    foreground_color_legend=nothing,
    xlim=(:auto, :auto), ylim=(:auto, :auto),
    lab="")
```

## Function definitions

Non-standard lineshapes are used to model resonances that do not conform to a simple `BreitWigner` distributions, or a `MultichannelBreitWigner` has to be defined explicitly.
The code below defines a new lineshape, and its deserialization method.

```{julia}
struct BreitWignerWidthExpLikeBugg <: HadronicLineshapes.AbstractFlexFunc
    m::Float64
    Î“::Float64
    Î³::Float64
end
function (BW::BreitWignerWidthExpLikeBugg)(Ïƒ)
    mK = 0.493677
    mÏ€ = 0.13957018
    ÏƒA = mK^2 - mÏ€^2 / 2
    @unpack m, Î“, Î³ = BW
    Î“t = (Ïƒ - ÏƒA) / (m^2 - ÏƒA) * Î“ * exp(-Î³ * Ïƒ)
    1 / (m^2 - Ïƒ - 1im * m * Î“t)
end
function ThreeBodyDecaysIO.dict2instance(::Type{BreitWignerWidthExpLikeBugg}, dict)
    @unpack mass, width, slope = dict
    return BreitWignerWidthExpLikeBugg(mass, width, slope)
end

# type piracy, not good
(bw::HadronicLineshapes.BreitWigner)(x::Dict) = bw(first(values(x)))
(bw::HadronicLineshapes.MultichannelBreitWigner)(x::Dict) = bw(first(values(x)))
```

## Deserialization of Objects to a Workspace

Model components are deserialized from a JSON file into computational objects within a workspace for further manipulation. First, functions representing lineshapes and formfactors are built. Following this, distributions are processed and added to the workspace.

```{julia}
input = open(joinpath(@__DIR__, "..", "..", "models", "Lc2ppiK.json")) do io
    JSON.parse(io)
end

workspace = Dict{String,Any}()

@unpack functions = input
for fn in functions
    @unpack name, type = fn
    instance_type = eval(Symbol(type))
    workspace[name] = dict2instance(instance_type, fn)
end

@unpack distributions = input
for dist in distributions
    @unpack name, type = dist
    instance_type = eval(Symbol(type))
    workspace[name] = dict2instance(instance_type, distributions[1]; workspace)
end
```

## Validation

The integrity of the model is checked by validating the value of distributions at a few phase space points.
The table lists the validation checkes and their status. The marks "ðŸŸ¢", "ðŸŸ¡", and "ðŸ”´" indicate
an accuracy of $<10^{-10}$, $<10^{-2}$, or $\ge10^{-2}$, respectively, for the difference between the reference and computed values.

```{julia}
#| code-fold: true
#| code-summary: A loop over validation points
let
    @unpack misc, parameter_points = input
    @unpack amplitude_model_checksums = misc

    map(amplitude_model_checksums) do check_point_info
        @unpack name, value, distribution = check_point_info
        #
        # pull distribution
        dist = workspace[distribution]

        # pull correct parameter point
        parameter_points_dict = array2dict(parameter_points; key="name")
        # find the point in the list of points
        parameter_point = parameter_points_dict[name]
        # compute, compare
        _parameters = array2dict(parameter_point["parameters"];
            key="name", apply=v -> v["value"])
        #
        function label_diff(diff; levels=[1e-2, 1e-10])
            _diff = abs(diff)
            _diff < levels[2] && return 'ðŸŸ¢'
            _diff < levels[1] && return 'ðŸŸ¡'
            return 'ðŸ”´'
        end
        computed_value = dist(_parameters)
        #
        tonumber(X::Number) = X
        tonumber(X::String) = string2complex(X)
        reference_value = tonumber(value)
        status = label_diff(reference_value - computed_value)
        #
        (; Distribution=distribution,
            Point=name, Status=status)
    end |> DataFrame
end
```

## Visualization

The model descibing the decay is fetched from the workspace

```{julia}
model_dist = [v for (k, v) in workspace if v isa HadronicUnpolarizedIntensity] |> first;
```

### Dalitz plot

The Dalitz plot shows the probability distribution across two dimensional phase space of the decay.

```{julia}
#| code-fold: true
#| code-summary: Dalitz plot plotting
let iÏƒx = 2, iÏƒy = 1
    xlab = ((i, j) = ij_from_k(iÏƒx);
    "mÂ²($i$j) [GeVÂ²]")
    ylab = ((i, j) = ij_from_k(iÏƒy);
    "mÂ²($i$j) [GeVÂ²]")
    model = model_dist.model

    plot(masses(model), Base.Fix1(unpolarized_intensity, model);
        iÏƒx, iÏƒy, xlab, ylab)
end
```


c
The projection of the model onto a mass variable is shown by black line.
Contributions from individual resonances are shown by the colored lines.

```{julia}
#| code-fold: true
#| code-summary: Computation of projections
let k = 2
    i, j = ij_from_k(k)
    xlab = "m($i$j) [GeV]"
    model = model_dist.model
    #
    mlims = sqrt.(lims(k, masses(model)))
    mv = range(mlims..., 150) |> shift_by_half
    #
    plot()
    plot!(mv, lab="Total") do m
        I = Base.Fix1(unpolarized_intensity, model)
        m * quadgk(projection_integrand(I, masses(model), m^2; k), 0, 1)[1]
    end
    chain_names = Set(model.names) |> collect |> sort
    for name in chain_names
        _model = model[model.names.==name]
        plot!(mv, lab=name) do m
            I = Base.Fix1(unpolarized_intensity, _model)
            m * quadgk(projection_integrand(I, masses(_model), m^2; k), 0, 1)[1]
        end
    end
    plot!(; xlab)
end
```

## Fit Fractions

The contribution of different resonances to the overall decay process is quantitatively assessed using numerical evaluation on a finite-size sample. Statistical uncertainty in the reported values only reflects the precision of these calculations. For a understanding of model uncertainties, refer to the original publications.

```{julia}
#| code-fold: true
#| code-summary: Computation of fit fractions
#| output: true
let
    model = model_dist.model
    ms = masses(model)
    #
    x2 = rand(10000, 2)
    data = map(eachslice(x2; dims=1)) do (x, y)
        Ïƒ1 = lims1(ms)[1] + x * diff(lims1(ms) |> collect)[1]
        Ïƒ2 = lims2(ms)[1] + y * diff(lims2(ms) |> collect)[1]
        Ïƒs = Invariants(ms; Ïƒ1, Ïƒ2)
    end
    filter!(data) do Ïƒs
        Kibble(Ïƒs, ms^2) < 0
    end
    #
    chain_names = Set(model.names) |> collect |> sort
    _int_i = map(chain_names) do name
        _calv = unpolarized_intensity.(model[model.names.==name] |> Ref, data)
        _value = mean(_calv)
        _err = sqrt(cov(_calv, _calv) / length(data))
        _value Â± _err
    end
    _int0 = sum(unpolarized_intensity.(model |> Ref, data)) / length(data)
    ff = round.(_int_i ./ _int0 .* 100; digits=2)
    DataFrame("Resonance" => chain_names, "Fit Franction [%]" => ff)
end
```
